{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\tod-assignment\\\\src\\\\components\\\\TodoList.js\";\nimport React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    return () => {\n      cleanup;\n    };\n  }, [input]);\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => prev.map(item => item.id === todoId ? newValue : item));\n  };\n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n    setTodos(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }; // localStorage.setItem('list',JSON.stringify(todos));\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"What's the Plan for Today?\"), /*#__PURE__*/React.createElement(TodoForm, {\n    onSubmit: addTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Todo, {\n    todos: todos,\n    completeTodo: completeTodo,\n    removeTodo: removeTodo,\n    updateTodo: updateTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TodoList;","map":{"version":3,"sources":["D:/React/tod-assignment/src/components/TodoList.js"],"names":["React","useState","TodoForm","Todo","TodoList","todos","setTodos","useEffect","cleanup","input","updateTodo","todoId","newValue","text","test","prev","map","item","id","removeTodo","removedArr","filter","todo","completeTodo","updatedTodos","isComplete","addTodo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,SAASC,QAAT,GAAoB;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AAEAM,EAAAA,SAAS,CAAC,MAAM;AAEd,WAAO,MAAM;AACXC,MAAAA,OAAO;AACR,KAFD;AAGD,GALQ,EAKN,CAACC,KAAD,CALM,CAAT;;AAQA,QAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACvC,QAAI,CAACA,QAAQ,CAACC,IAAV,IAAkB,QAAQC,IAAR,CAAaF,QAAQ,CAACC,IAAtB,CAAtB,EAAmD;AACjD;AACD;;AAEDP,IAAAA,QAAQ,CAACS,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYP,MAAZ,GAAqBC,QAArB,GAAgCK,IAAlD,CAAT,CAAR;AACD,GAND;;AAQA,QAAME,UAAU,GAAGD,EAAE,IAAI;AACvB,UAAME,UAAU,GAAG,CAAC,GAAGf,KAAJ,EAAWgB,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAtC,CAAnB;AAEAZ,IAAAA,QAAQ,CAACc,UAAD,CAAR;AACD,GAJD;;AAMA,QAAMG,YAAY,GAAGL,EAAE,IAAI;AACzB,QAAIM,YAAY,GAAGnB,KAAK,CAACW,GAAN,CAAUM,IAAI,IAAI;AACnC,UAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAhB,EAAoB;AAClBI,QAAAA,IAAI,CAACG,UAAL,GAAkB,CAACH,IAAI,CAACG,UAAxB;AACD;;AACD,aAAOH,IAAP;AACD,KALkB,CAAnB;AAMAhB,IAAAA,QAAQ,CAACkB,YAAD,CAAR;AACD,GARD,CAzBkB,CAkClB;;;AAEA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,eAEE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEE,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAErB,KADT;AAEE,IAAA,YAAY,EAAEkB,YAFhB;AAGE,IAAA,UAAU,EAAEJ,UAHd;AAIE,IAAA,UAAU,EAAET,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAYD;;AAED,eAAeN,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    \n    return () => {\n      cleanup\n    }\n  }, [input])\n  \n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n\n    setTodos(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n  // localStorage.setItem('list',JSON.stringify(todos));\n\n  return (\n    <>\n      <h1>What's the Plan for Today?</h1>\n      <TodoForm onSubmit={addTodo} />\n      <Todo\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}